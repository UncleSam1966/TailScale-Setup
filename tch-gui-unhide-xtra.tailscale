#!/bin/sh

if [ "$(basename $0)" = "tch-gui-unhide-xtra.tailscale" -o -z "$FW_BASE" ]; then
  echo "ERROR: This script must NOT be executed!"
  echo "       Place it in the same directory as tch-gui-unhide and it will"
  echo "       be applied automatically when you run tch-gui-unhide."
  exit
fi

# The tch-gui-unhide-xtra scripts should output a single line to indicate success or failure
# as the calling script has left a hanging echo -n. Include a leading space for clarity.

if [ -f /root/tailscale/tailscale -a -z "$XTRAS_REMOVE" ]; then
  echo " Adding Tailscale support..."

# Extract the applied flags from the tailscale install
  SERVICE=$(/etc/init.d/tailscale status)
  RUNNING=$(tailscale debug prefs | jsonfilter -e '@.WantRunning')
  ALIAS=$(tailscale debug prefs | jsonfilter -e '@.Hostname')
  SUBNET=$(tailscale debug prefs | jsonfilter -e '@.AdvertiseRoutes[2]')
  EXIT=$(tailscale debug prefs | jsonfilter -e '@.AdvertiseRoutes[0]')

  if [ "$SERVICE" = "running" ]; then
    SERVICE="1"
  else
    SERVICE="0"
  fi

  if [ "$RUNNING" = "true" ]; then
    RUNNING="1"
  else
    RUNNING="0"
  fi

  if [ "$EXIT" != "$SUBNET" ]; then
    EXIT="1"
  fi

  /etc/init.d/tailscale start > /dev/null 2>&1
  /etc/init.d/tailscale disable

# Create the tailscale mapping, commitapply, config, card, modal, flags and service
  cat <<"UCI" > /usr/share/transformer/mappings/uci/tailscale.map
local config_tailscale = "tailscale"

-- uci.tailscale
mapper("uci_1to1").registerConfigMap(config_tailscale)

-- uci.tailscale.service
local tailscale_service = {
  config = config_tailscale,
  section = "service",
  type = "service",
  options = { "enabled","port" }
}

mapper("uci_1to1").registerSimpleMap(tailscale_service)

-- uci.tailscale.flags
local tailscale_flags = {
  config = config_tailscale,
  section = "flags",
  type = "flags",
  options = { "tsup","reset","alias","subnet","exit" }
}

mapper("uci_1to1").registerSimpleMap(tailscale_flags)
UCI
  cat <<"CA" > /usr/share/transformer/commitapply/tailscale.ca
^tailscale%.service /etc/init.d/tailscale reload
^tailscale%.flags /root/tailscale/flags
CA
  cat <<CFG > /etc/config/tailscale
config tailscale 'service'
	option enabled "$SERVICE"
	option port '41641'

config tailscale 'flags'
	option tsup "$RUNNING"
	option reset '1'
	option alias "$ALIAS"
	option subnet "$SUBNET"
	option exit "$EXIT"
CFG
  cat <<"CRD" > /www/cards/004_tailscale.lp
--pretranslated: do not change this file
 ngx.print('<style>\
p.subinfos>div{height:17px;width:230px;float:left;}\
	.card-label {\
margin-bottom:0px;\
                height:17px;\
		float: left;\
		padding-right: 5px;\
		font-weight: 500;\
		font-size: 16px;\
		cursor: default;\
	}\
	.card-control {\
		cursor: default;\
	}\
</style>\
');  
local ngx = ngx

-- Enable localization
gettext.textdomain('webui-core')

local ui_helper = require("web.ui_helper")
local content_helper = require ("web.content_helper")

local content = {
  tailscaleEnabled = "uci.tailscale.service.enabled",
  port = "uci.tailscale.service.port",
  TSup = "uci.tailscale.flags.tsup",
  reset = "uci.tailscale.flags.reset",
  alias = "uci.tailscale.flags.alias",
  subnet = "uci.tailscale.flags.subnet",
  isexit = "uci.tailscale.flags.exit",
}
content_helper.getExactContent(content)

local TSstate = { state = content.tailscaleEnabled or "0" }
local serviceport = "Service Port: "
local setTSup = "Tailscale Up: "
local setalias = "Alias: "
local setsubnet = "Subnet: "
local exitnode = "Exit Node: "
local resetdefaults = "Reset to Defaults: "

if content.TSup == "1" then
  content.TSup = "Yes"
else
  content.TSup = "No"
end

if content.isexit == "1" then
  content.isexit = "Yes"
else
  content.isexit = "No"
end

local tailscaleStatus
if TSstate.state == "1" then
  tailscaleStatus = "Activated"
else
  tailscaleStatus = "NotActivated"
end

if tailscaleStatus == "Activated" then
  status = "light green"
elseif tailscaleStatus:match("Error") then
  status = "light red"
else
  status = "light off"
end

ngx.print('\
<div class="span3">\
  <div class="smallcard">\
    ',ui_helper.createCardHeader(T"TailScale","modals/tailscale-modal.lp",nil,nil,{icon={class="icon-th"}}),'\
    <div class="content card_bg" data-bg-text="&#xf00a">\
      <div class="',status,'"></div>\
      <p><strong>',tailscaleStatus,'</strong></p>\
');

-- Conditionally print the last 5 lines only when Tailscale service is enabled
if TSstate.state == "1" then
  ngx.print('\
      <p class="subinfos" style="padding-left: 20px;"><strong>TailScale Up: </strong><span style="padding-left: 6px;">',content.TSup,'</span></p>\
      <p class="subinfos" style="padding-left: 20px;"><strong>Service Port: </strong><span style="padding-left: 6px;">',content.port,'</span></p>\
      <p class="subinfos" style="padding-left: 20px;"><strong>Alias: </strong><span style="padding-left: 50px;">',content.alias,'</span></p>\
      <p class="subinfos" style="padding-left: 20px;"><strong>Subnet: </strong><span style="padding-left: 37px;">',content.subnet,'</span></p>\
      <p class="subinfos" style="padding-left: 20px;"><strong>Exit Node: </strong><span style="padding-left: 24px;">',content.isexit,'</span></p>\
')
end

ngx.print('\
    </div>\
  </div>\
</div>\
');
CRD
  cat <<"MOD" > /www/docroot/modals/tailscale-modal.lp
--pretranslated: do not change this file

-- Localization
gettext.textdomain('webui-core')

local ngx = ngx
local ui_helper = require("web.ui_helper")
local message_helper = require("web.uimessage_helper")
local post_helper = require("web.post_helper")

local qry_params = {
  tailscaleEnabled = "uci.tailscale.service.enabled",
  port = "uci.tailscale.service.port",
  TSup = "uci.tailscale.flags.tsup",
  alias = "uci.tailscale.flags.alias",
  subnet = "uci.tailscale.flags.subnet",
  isexit = "uci.tailscale.flags.exit",
  reset = "uci.tailscale.flags.reset",
}

local qry_valid = {
  tailscaleEnabled = post_helper.validateBoolean,
  port = post_helper.validateStringIsPort,
  TSup = post_helper.validateBoolean,
  alias = post_helper.validateNonEmptyString,
  subnet = post_helper.validateIPAndSubnet(4),
  isexit = post_helper.validateBoolean,
  reset = post_helper.validateBoolean,
}

local qry_data,qry_helpmsg = post_helper.handleQuery(qry_params,qry_valid)

ngx.print(ui_helper.createHeader(T"TailScale",false,true),'\
<div class="modal-body update">\
  <form class="form-horizontal" method="post" action="modals/tailscale-modal.lp">\
  ',ui_helper.createMessages(message_helper.popMessages()),'\
    <fieldset>\
      <legend>',T"Service",'</legend>',
        ui_helper.createSwitch(T"Enabled","tailscaleEnabled",qry_data["tailscaleEnabled"],nil,qry_helpmsg["tailscaleEnabled"]),
        ui_helper.createInputText(T"Port","port",qry_data["port"],nil,qry_helpmsg["port"]),
      '\
    </fieldset>\
    <fieldset>\
      <legend>',T"Flags",'</legend>',
        ui_helper.createSwitch(T"Tailscale Up","TSup",qry_data["TSup"],nil,qry_helpmsg["TSup"]),
        ui_helper.createInputText(T"Alias","alias",qry_data["alias"],nil,qry_helpmsg["alias"]),
        ui_helper.createInputText(T"Subnet","subnet",qry_data["subnet"],nil,qry_helpmsg["subnet"]),
        ui_helper.createSwitch(T"Exit Node","isexit",qry_data["isexit"],nil,qry_helpmsg["isexit"]),
        ui_helper.createSwitch(T"Reset","reset",qry_data["reset"],nil,qry_helpmsg["reset"]),
      '\
    </fieldset>\
  </form>\
</div>\
',ui_helper.createFooter())
MOD
  cat <<"FLG" > /root/tailscale/flags
#!/bin/sh

RESET=$(uci -q get tailscale.flags.reset)
if [ "$RESET" = "0" ]; then
    RESET=""
else
    RESET=" --reset"
	uci -q set tailscale.flags.reset="0"
fi

ALIAS=$(uci -q get tailscale.flags.alias)

SUBNET=$(uci -q get tailscale.flags.subnet)

EXIT=$(uci -q get tailscale.flags.exit)
if [ "$EXIT" = "0" ]; then
    EXIT="=false"
  FLAGS=$EXIT
else
    EXIT=""
fi

TSUP=$(uci -q get tailscale.flags.tsup)
if [ "$TSUP" = "0" ]; then
    TSUP="down"
  FLAGS=$TSUP
else
    TSUP="up"
  FLAGS=$TSUP$RESET" --advertise-exit-node$EXIT"" --advertise-routes=$SUBNET"" --hostname=$ALIAS"
fi

/usr/sbin/tailscale $FLAGS
FLG
  cat <<"SRV" > /etc/init.d/tailscale
#!/bin/sh /etc/rc.common

START=95
STOP=01
USE_PROCD=1

. $IPKG_INSTROOT/lib/functions.sh

start_service() {
	local enabled=$(uci_get tailscale service enabled 0)
	local port=$(uci_get tailscale service port 41641)

	/usr/sbin/tailscaled --cleanup

	if [ "$enabled" == "1" ] ; then
		uci_toggle_state "tailscale" "service" "Enabled"
		procd_open_instance
		procd_set_param command /usr/sbin/tailscaled

		# Set the port to listen on for incoming VPN packets.
		# Remote nodes will automatically be informed about the new port number,
		# but you might want to configure this in order to set external firewall
		# settings.
		procd_append_param command --port $port

        # update firewall
		uci -q set $(uci -q show firewall | grep -E "Allow-Tailscale" | cut -d. -f1-2).dest_port=$port

		# OpenWRT /var is a symlink to /tmp, so write persistent state elsewhere.
		procd_append_param command --state /root/tailscale/tailscaled.state
		
		procd_set_param respawn
		procd_set_param stdout 1
		procd_set_param stderr 1
		procd_close_instance
	else
		 uci_toggle_state "tailscale" "service" "Disabled"
	fi
}

stop_service() {
	local enabled=$(uci_get tailscale service enabled 0)

	if [ "$enabled" == "0" ] ; then
		/usr/sbin/tailscale down
		/usr/sbin/tailscaled --cleanup
		# kill -9 `pgrep tailscale -f`
	fi
}
SRV

  chmod 644 /usr/share/transformer/mappings/uci/tailscale.map
  chmod 644 /usr/share/transformer/commitapply/tailscale.ca
  chmod 644 /etc/config/tailscale
  chmod 644 /www/cards/004_tailscale.lp
  chmod 644 /www/docroot/modals/tailscale-modal.lp
  chmod 755 /root/tailscale/flags
  chmod 755 /etc/init.d/tailscale

  /etc/init.d/tailscale enable
  /etc/init.d/tailscale start > /dev/null 2>&1

  SRV_transformer=$(( $SRV_transformer + 1 ))

# Update the tailscale keep file as necessary
  MAP="/usr/share/transformer/mappings/uci/tailscale.map"
  CA="/usr/share/transformer/commitapply/tailscale.ca"
  KEEP="/lib/upgrade/keep.d/tailscale"
  if ! grep -q "$MAP.*$CA" "$KEEP"; then
    sed -i -e "\$a$MAP" "$KEEP"
    sed -i -e "\$a$CA" "$KEEP"
  fi

else
  echo " SKIPPED - /root/tailscale/tailscale not found"
fi