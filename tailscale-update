#!/bin/sh

SCRIPT="$(basename $0)"

usage() {
cat <<EOH
Checks if there is a later release of Tailscale and if so, upgrades the 
installed version.

Usage: $0 [options]

Options:
 -C  Adds or removes the scheduled weekly cron job
 -U  Download the latest version of $SCRIPT from GitHub

EOH
exit
}

upgrade() {
  RESPONSE_CODE=$(curl -kLsI -o /dev/null -w '%{http_code}' https://raw.githubusercontent.com/UncleSam1966/tch-tailscale/master/$SCRIPT)
  if [ "$RESPONSE_CODE" = 200 ];then
    curl -kL -o $SCRIPT https://raw.githubusercontent.com/UncleSam1966/tch-tailscale/master/$SCRIPT
    if [ $? -eq 0 ];then
      chmod +x $SCRIPT
      echo "[Tailscale-Update] Successfully downloaded $SCRIPT."
    else
      echo "[Tailscale-Update] Failed to download $SCRIPT."
    fi
  elif [ "$RESPONSE_CODE" = 404 ];then
    echo "[Tailscale-Update] ERROR! Not found on GitHub???"
  elif [ "$RESPONSE_CODE" = 000 ];then
    echo "ERROR! No Internet connection???"
  else
    echo "[Tailscale-Update] ERROR! Unknown response code $RESPONSE_CODE"
  fi
  exit
}

CRON=N
while getopts :CU option; do
 case "${option}" in
  C)  CRON=Y;;
  U)  upgrade;;
  *)  usage;;
 esac
done
shift $((OPTIND-1))

if [ $CRON = Y ]; then
  grep -q "$SCRIPT" /etc/crontabs/root
  if [ $? = 0 ]; then
    sed -e "/$SCRIPT/d" -i /etc/crontabs/root
    echo "[Tailscale-Update] Scheduled Tailscale update has been removed."
  else
    mm=$(awk 'BEGIN{srand();print int(rand()*59);}')
    hh=$(awk 'BEGIN{srand();print int(rand()*3)+2;}')
    echo "$mm $hh * * 5 $(cd $(dirname $0); pwd)/$SCRIPT" >> /etc/crontabs/root
    echo "[Tailscale-Update] Tailscale update has been scheduled to execute every Saturday at $hh:$(printf '%02d' $mm)am."
  fi
  /etc/init.d/cron reload
  exit
fi


# check the version of the installed Tailscale
echo "[Tailscale-Update] Getting installed Tailscale version..."
CURRENT=$(/usr/sbin/tailscale --version | head -n 1)
[ -z "$CURRENT" ] && { echo "[Tailscale-Update] ERROR! Could not determine current Tailscale version. Aborting..."; exit 2; }
echo "[Tailscale-Update] Installed Tailscale version is $CURRENT"

# Check the latest version of Tailscale
echo "[Tailscale-Update] Getting latest Tailscale version..."
LATEST=$(curl -ks https://tailscale.com/changelog/#client | awk '/<a id="/{print $3;}0' | head -n 1 | cut -c2-)
[ -z "$LATEST" ] && { echo "[Tailscale-Update] ERROR! Could not determine latest Tailscale version. Aborting..."; exit 2; }
echo "[Tailscale-Update] Latest Tailscale version is $LATEST"

if [ $CURRENT != $LATEST ]; then
  case "$(uname -m)" in
    aarch64)  ARCH="arm64";;
    armv7l)   ARCH="arm";;
    *)        echo "[Tailscale-Update] ERROR! Unable to handle $(uname -m) archictecture! Aborting..."; exit 2;;
  esac
  FILENAME="tailscale_${LATEST}_${ARCH}.tgz"
  DIRNAME="tailscale_${LATEST}_${ARCH}"
  URL="https://pkgs.tailscale.com/stable/$FILENAME"

  cd /tmp
  echo "[Tailscale-Update] Downloading $URL"
  curl -kLSO "$URL"
  echo "[Tailscale-Update] Extracting $FILENAME into /tmp"
  tar -zxvf "$FILENAME"
  cd /usr/sbin
  echo "[Tailscale-Update] Stopping Tailscale $CURRENT..."
  /etc/init.d/tailscale stop
  echo "[Tailscale-Update] Upgrading Tailscale to $LATEST..."
  cp "/tmp/$DIRNAME/tailscale" .
  cp "/tmp/$DIRNAME/tailscaled" .
  echo "[Tailscale-Update] Starting Tailscale..."
  /etc/init.d/tailscale start
  echo "[Tailscale-Update] Cleaning up..."
  rm -rf "/tmp/$FILENAME" "/tmp/$DIRNAME" 
fi

echo "[Tailscale-Update] Done!"
